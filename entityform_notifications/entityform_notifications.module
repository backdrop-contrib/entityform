<?php
/**
 * @file
 * Provide text export functionality.
 *
 * A lot of code borrowed from entity2text.
 */

/**
 * Implements hook_token_info_alter().
 *
 * Extend entityform tokens with a textexport per view mode.
 */
function entityform_notifications_token_info_alter(&$data) {
  $entity_info = entity_get_info('entityform');
  $view_modes = $entity_info['view modes'];
  foreach ($entity_info['view modes'] as $view_name => $view_mode) {
    $data['tokens']['entityform']['textexport-' . $view_name] = array(
      'name' => 'Text Export: ' . $view_mode['label'],
      'description' => "Exports the enity text using View Mode " . $view_mode['label'],
      'type' => 'text',
    );
  }
}

/**
 * Implements hook_tokens().
 *
 * Replace tokens created by this module with Entityform rendered as text for
 * the View Mode
 */
function entityform_notifications_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  foreach ($tokens as $token_key => $value) {
    $token_parts = explode('-', $token_key);
    if ($token_parts[0] == 'textexport') {
      $view_mode = $token_parts[1];
      $entity = $data['entityform'];
      $rendered_text = _entityform_notifications_render_entity_to_text($entity, $view_mode);
      $replacements[$value] = $rendered_text;
    }
  }
  return $replacements;
}

/**
 * Return rendered text for Entity
 *
 * @param Entityform $entity
 *   Loaded entityform instance.
 * @param string $view_mode
 *   The view mode to display.
 *
 * @return string
 */
function _entityform_notifications_render_entity_to_text($entity, $view_mode) {
  $rendered_entity = entity_view($entity, 'entityform', $view_mode);
  $text = _entityform_notifications_renderarray_to_text($rendered_entity);
  return $text;
}

/**
 * Return the text output for a Backdrop Renderable Array
 *
 * @param array $render_array
 *   Backdrop renderable array.
 * @param bool $print_empty_title
 *   Not used here.
 * @param string $indent_text
 *   Not used here.
 *
 * @return string
 */
function _entityform_notifications_renderarray_to_text($render_array, $print_empty_title = FALSE, $indent_text = '') {
  $tab_text = "   ";
  $output = '';
  $markup = '';
  $title = '';
  if (!empty($render_array['#markup'])) {
    $markup .= "$indent_text$tab_text" . htmlspecialchars_decode(strip_tags($render_array['#markup']));
    $markup = trim($markup);
  }
  if (isset($render_array['#title'])) {
    $title .= htmlspecialchars_decode(strip_tags($render_array['#title'])) . ":";
    $title = trim($title);
  }

  if (!empty($markup) && empty($title)) {
    $output .= "\n" . $indent_text . $markup . "\n";
  }
  elseif (!empty($markup) && !empty($title)) {
    $output .= "\n" . $indent_text . $title . "\n" . $indent_text . $tab_text . $markup;
  }
  elseif (empty($markup) && !empty($title)) {
    $output .= "\n" . $indent_text . $title;
  }

  if (!empty($output)) {
    $indent_text .= $tab_text;
  }
  foreach (element_children($render_array) as $child) {
    // Make any final changes to the element before it is maybe rendered. This
    // means that the $element or the children can be altered or corrected
    // before the element is rendered into the final text.
    if (isset($render_array[$child]['#pre_render'])) {
      foreach ($render_array[$child]['#pre_render'] as $function) {
        if (function_exists($function)) {
          $render_array[$child] = $function($render_array[$child]);
        }
      }
    }
    // If there's a type use it to render the element. E.g. address field only
    // adds the proper output values in this step.
    if (isset($render_array[$child]['#type'])) {
      $rendered = backdrop_render($render_array[$child]);
      // Add line breaks to all block end tags, then strip all tags and
      // sanitize.
      $stripped = strip_tags(_entityform_notifications_block_html_entities_to_nl($rendered, $indent_text . $tab_text));
      $child_text = "\n$indent_text$tab_text" . htmlspecialchars_decode($stripped);
    }
    else {
      $child_text  = _entityform_notifications_renderarray_to_text($render_array[$child], $print_empty_title, $indent_text);
    }
    if (isset($render_array[$child]['#weight'])) {
      $child_array[$render_array[$child]['#weight']] = $child_text;
    }
    else {
      $child_array[] = $child_text;
    }

  }
  if (!empty($child_array)) {
    ksort($child_array);
    $output .= implode('', $child_array);
  }
  return $output;
}

/**
 * Converts block / line wrapping html elements to breaks.
 *
 * @param string $text
 *   The text to process.
 * @param string $indent_text
 *   The indent text.
 *
 * @return string
 *   The processed text.
 */
function _entityform_notifications_block_html_entities_to_nl($text, $indent_text = '') {
  // Replace tags where nesting should only cause one break.
  $text = preg_replace('/(\<(\/\s*(div|dd|dl|article|figure|aside|footer|ol|output|audio|form|blockquote|canvas|section|hgroup|tfoot|main|nav|video|figcaption))(\s*)?\/?\>)+/i', "\n" . $indent_text, $text);
  // Replace tags where a tag always creates a break.
  $text = preg_replace('/\<(br|hr|\/\s*(fieldset|ul|table|pre|h1|h2|h3|h4|h5|h6))(\s*)?\/?\>/i', "\n" . $indent_text, $text);
  return $text;
}
