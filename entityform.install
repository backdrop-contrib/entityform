<?php
/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */

/**
 * Implements hook_schema().
 */
function entityform_schema() {
  $schema = array();

  $schema['entityform'] = array(
    'description' => 'The base table for entityform entities.',
    'fields' => array(
      'entityform_id' => array(
        'description' => 'Primary Key: Identifier for a entityform.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {entityform_type}.type of this entityform.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The language of the entityform.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the entityform was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the entityform was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => "The {users}.uid of the associated user.",
      ),
      'draft' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => "Wheter this form submission is a draft.",
      ),
    ),
    'primary key' => array('entityform_id'),
    'indexes' => array(
      'type_index' => array('type'),
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'type' => array(
        'table' => 'entityform_type',
        'columns' => array('type' => 'type'),
      ),
    ),
  );

  $schema['entityform_type'] = array(
    'description' => 'Stores information about defined entityform types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique entityform type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this entityform type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this entityform type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this entityform type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this entityform type.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function entityform_update_last_removed() {
  return 7007;
}

/**
 * Migrate entityform variables to config.
 */
function entityform_update_1000() {
  $config = config('entityform.settings');
  $config->set('entityform_type_defaults', update_variable_get('entityform_type_defaults', array()));
  $config->save();

  update_variable_del('entityform_type_defaults');
}

/**
 * Get default views if they have not been overridden.
 */
function entityform_update_1001() {
  // D7 upgrade: if the default views have never been touched, they're not in
  // the database, so views_update_1001() could not convert them. In this case
  // we copy the default.
  $default_views = array(
    'views.view.entityforms',
    'views.view.entityform_type_list',
    'views.view.user_entityforms',
  );
  $path = backdrop_get_path('module', 'entityform') . '/config/';
  foreach ($default_views as $name) {
    $config = config($name);
    if (!$config->isNew()) {
      // The view config exists, nothing to do.
      continue;
    }
    $contents = file_get_contents($path . $name . '.json');
    $data = json_decode($contents, TRUE);
    $config->setData($data);
    $config->save();
  }
}

/**
 * Implements hook_install().
 */
function entityform_install() {
  // Dynamically generated variable data was detected.
}
